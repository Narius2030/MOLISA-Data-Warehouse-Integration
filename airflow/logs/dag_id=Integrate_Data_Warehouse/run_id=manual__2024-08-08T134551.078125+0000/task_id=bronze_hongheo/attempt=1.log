[2024-08-08T13:46:15.146+0000] {local_task_job_runner.py:120} INFO - ::group::Pre task execution logs
[2024-08-08T13:46:15.211+0000] {taskinstance.py:2076} INFO - Dependencies all met for dep_context=non-requeueable deps ti=<TaskInstance: Integrate_Data_Warehouse.bronze_hongheo manual__2024-08-08T13:45:51.078125+00:00 [queued]>
[2024-08-08T13:46:15.233+0000] {taskinstance.py:2076} INFO - Dependencies all met for dep_context=requeueable deps ti=<TaskInstance: Integrate_Data_Warehouse.bronze_hongheo manual__2024-08-08T13:45:51.078125+00:00 [queued]>
[2024-08-08T13:46:15.234+0000] {taskinstance.py:2306} INFO - Starting attempt 1 of 1
[2024-08-08T13:46:15.314+0000] {taskinstance.py:2330} INFO - Executing <Task(SQLExecuteQueryOperator): bronze_hongheo> on 2024-08-08 13:45:51.078125+00:00
[2024-08-08T13:46:15.321+0000] {standard_task_runner.py:63} INFO - Started process 116 to run task
[2024-08-08T13:46:15.326+0000] {standard_task_runner.py:90} INFO - Running: ['airflow', 'tasks', 'run', 'Integrate_Data_Warehouse', 'bronze_hongheo', 'manual__2024-08-08T13:45:51.078125+00:00', '--job-id', '314', '--raw', '--subdir', 'DAGS_FOLDER/etl_ldtbxh.dag.py', '--cfg-path', '/tmp/tmpe46dhf92']
[2024-08-08T13:46:15.329+0000] {standard_task_runner.py:91} INFO - Job 314: Subtask bronze_hongheo
[2024-08-08T13:46:15.429+0000] {task_command.py:426} INFO - Running <TaskInstance: Integrate_Data_Warehouse.bronze_hongheo manual__2024-08-08T13:45:51.078125+00:00 [running]> on host 45f7764b2bf2
[2024-08-08T13:46:15.604+0000] {taskinstance.py:2648} INFO - Exporting env vars: AIRFLOW_CTX_DAG_OWNER='airflow' AIRFLOW_CTX_DAG_ID='Integrate_Data_Warehouse' AIRFLOW_CTX_TASK_ID='bronze_hongheo' AIRFLOW_CTX_EXECUTION_DATE='2024-08-08T13:45:51.078125+00:00' AIRFLOW_CTX_TRY_NUMBER='1' AIRFLOW_CTX_DAG_RUN_ID='manual__2024-08-08T13:45:51.078125+00:00'
[2024-08-08T13:46:15.606+0000] {taskinstance.py:430} INFO - ::endgroup::
[2024-08-08T13:46:15.623+0000] {sql.py:276} INFO - Executing: -- CREATE EXTENSION dblink;

/*** Load stage for dimensions ***/

DO
$$
BEGIN
    /***
        Load Source to stgDimFamily (Bronze)
    **/
    INSERT INTO "stgDimFamily"(family_id, family_code, family_type, years, 
                            province_code, province_name, district_code,
                            district_name, ward_code, ward_name, 
                            family_number, nation_in_place)
    SELECT 
        family_id, family_code, family_type, years
		province_code, province_name, district_code,
        district_name, ward_code, ward_name, 
        family_number, nation_in_place
    FROM dblink('host=host.docker.internal dbname=hongheovna password=nhanbui user=postgres port=5434', 
                'select * from public.vw_stgdimfamily') 
    AS (
        family_id uuid,
        family_code VARCHAR(10),
        family_type VARCHAR(25),
        years SMALLINT,
        province_code CHAR(5),
        province_name VARCHAR(35),
        district_code CHAR(5),
        district_name VARCHAR(35),
        ward_code CHAR(5),
        ward_name VARCHAR(35),
        family_number VARCHAR(20),
        nation_in_place BOOL,
        created_date TIMESTAMP
    )
    WHERE created_date >= (SELECT MAX(finished_at) FROM "DimAuditForeigned");

    /***
        Load Source to stgDimFamilyMember (Bronze)
    ***/
    INSERT INTO "stgDimFamilyMember"(member_id, family_id, full_name, owner_relationship, 
                                    year_of_birth, month_of_birth, day_of_birth, 
                                    identity_card_number, nation, sex, height, weight,
                                    education_status, education_level, culture_level, training_level, has_medical_insurance,
                                    social_assistance, has_job, job_type, has_contract, has_pension)
    SELECT
        member_id, family_id, full_name, owner_relationship, 
        year_of_birth, month_of_birth, day_of_birth, 
        identity_card_number, nation, sex, height, weight,
        education_status, education_level, culture_level, training_level, has_medical_insurance,
        social_assistance, has_job, job_type, has_contract, has_pension
    FROM dblink('host=host.docker.internal dbname=hongheovna password=nhanbui user=postgres port=5434',
                'select * from public.vw_stgdimfamilymember')
    AS (
        member_id uuid,
        family_id uuid,
        full_name VARCHAR(35),
        owner_relationship VARCHAR(15),
        year_of_birth SMALLINT,
        month_of_birth SMALLINT,
        day_of_birth SMALLINT,
        identity_card_number VARCHAR(12),
        nation VARCHAR(15),
        sex BOOL,
        height INT,
        weight INT,
        education_status BOOL,
        education_level public.EDU_LEVEL,
        culture_level public.CUL_LEVEL,
        training_level public.TRAIN_LEVEL,
        has_medical_insurance BOOL,
        social_assistance public.TCXH,
        has_job public.JOB_STATUS,
        job_type public.JOB_CATE,
        has_contract public.CONTRACT_TYPE,
        has_pension public.PENSION_TYPE,
        created_date TIMESTAMP
    )
    WHERE created_date >= (SELECT MAX(finished_at) FROM "DimAuditForeigned");


    /***
        Load Source to stgDimFamilyMember (Bronze)
    ***/
    INSERT INTO "stgDimSurvey"(family_id, year, month,
						   a_id, fast_classify_person,
						   condition_codes, condition_names, b1_id, is_aquaculture, 
						   electricity_source, water_source, reason_names, get_policy_names,
						   need_policy_names, a_grade, b1_grade, b2_grade,
						   final_result, classify_person)
    SELECT
        family_id, year, month,
        a_id, fast_classify_person,
        condition_codes, condition_names, b1_id, is_aquaculture, 
        electricity_source, water_source, reason_names, get_policy_names,
        need_policy_names, a_grade, b1_grade, b2_grade,
        final_result, classify_person
    FROM dblink('host=host.docker.internal dbname=hongheovna password=nhanbui user=postgres port=5434', 
                'select * from public.vw_stgdimsurvey')
    AS (
        family_id uuid,
        a_id uuid,
        fast_classify_person VARCHAR(35),
        year INT,
        month INT,
        condition_codes CHAR(5)[],
        condition_names VARCHAR(255)[],
        b1_id uuid,
        is_aquaculture BOOL,
        electricity_source CHAR(5),
        water_source CHAR(5),
        reason_names VARCHAR(255)[],
        get_policy_names VARCHAR(255)[],
        need_policy_names VARCHAR(255)[],
        a_grade BOOL,
        b1_grade SMALLINT,
        b2_grade SMALLINT,
        final_result public.CLASSIFICATION,
        classify_person VARCHAR(35),
        a_created_date TIMESTAMP,
        b1_created_date TIMESTAMP,
        rs_created_date TIMESTAMP
    )
    WHERE (a_created_date >= (SELECT MAX(finished_at) FROM "DimAuditForeigned"))
        OR (b1_created_date >= (SELECT MAX(finished_at) FROM "DimAuditForeigned"))
        OR (rs_created_date >= (SELECT MAX(finished_at) FROM "DimAuditForeigned"));

EXCEPTION
	WHEN SQLSTATE '42703' THEN
		UPDATE "DimAuditForeigned" 
		SET 
			information = 'Something went wrong with selected columns. HINT: Check on "SELECT" or "INSERT" statement',
			status = 'ERROR',
            finished_at = NOW()
		WHERE start_at = (SELECT MAX(start_at) FROM "DimAuditForeigned");
    WHEN OTHERS THEN
        UPDATE "DimAuditForeigned" 
		SET 
			information = 'Something went wrong. HINT: Cannot identify the error and its solution',
			status = 'ERROR',
            finished_at = NOW()
		WHERE start_at = (SELECT MAX(start_at) FROM "DimAuditForeigned");
-- 		RAISE EXCEPTION  'Something went wrong' USING HINT = 'Cannot identify the error and its solution';

END;
$$;


/*** Load stage for facts ***/

DO
$$
BEGIN
    /***
        Load Source to stgPovertyStatusFact (Bronze)
    ***/
    INSERT INTO "stgPovertyStatusFact"(family_id, year, province_name, district_name,
                                    family_code, owner_name, hard_reasons, 
                                    get_policies, need_policies, 
                                    a_grade, b1_grade, b2_grade, final_result)
    SELECT
        family_id, year, province_name, district_name,
        family_code, owner_name, hard_reasons, 
        get_policies, need_policies, 
        a_grade, b1_grade, b2_grade, final_result
    FROM dblink('host=host.docker.internal dbname=hongheovna password=nhanbui user=postgres port=5434', 
                'select * from public.vw_stgpovertystatusfact')
    AS (
        family_id uuid,
        year SMALLINT,
        province_name VARCHAR(35),
        district_name VARCHAR(35),
        family_code VARCHAR(10),
        owner_name VARCHAR(35),
        hard_reasons VARCHAR(255)[],
        get_policies VARCHAR(255)[],
        need_policies VARCHAR(255)[],
        a_grade BOOL,
        b1_grade SMALLINT,
        b2_grade SMALLINT,
        final_result public.CLASSIFICATION,
        a_created_date TIMESTAMP,
        b1_created_date TIMESTAMP,
        rs_created_date TIMESTAMP
    )
    WHERE (a_created_date >= (SELECT MAX(finished_at) FROM "DimAuditForeigned"))
        OR (b1_created_date >= (SELECT MAX(finished_at) FROM "DimAuditForeigned"))
        OR (rs_created_date >= (SELECT MAX(finished_at) FROM "DimAuditForeigned"));



    /***
        Load Source to stgMemberSurveyFact (Bronze)
    ***/
    INSERT INTO "stgMemberSurveyFact"(member_id, family_id, year, month,
                                    province_name, district_name,
                                    member_name, owner_relationship,
                                    year_of_birth, month_of_birth, day_of_birth,
                                    identity_card_number, nation, final_result)
    SELECT
        member_id, family_id, year, month,
        province_name, district_name,
        full_name, owner_relationship,
        year_of_birth, month_of_birth, day_of_birth,
        identity_card_number, nation, final_result
    FROM dblink('host=host.docker.internal dbname=hongheovna password=nhanbui user=postgres port=5434', 
                'select * from public.vw_stgmembersurveyfact')
    AS (
        member_id uuid,
        family_id uuid,
        year INT,
        month INT,
        province_name VARCHAR(35),
        district_name VARCHAR(35),
        full_name VARCHAR(35),
        owner_relationship VARCHAR(15),
        year_of_birth SMALLINT,
        month_of_birth SMALLINT,
        day_of_birth SMALLINT,
        identity_card_number VARCHAR(12),
        nation VARCHAR(15),
        final_result public.CLASSIFICATION,
        member_created_date TIMESTAMP,
        rs_created_date TIMESTAMP
    )
    WHERE (member_created_date >= (SELECT MAX(finished_at) FROM "DimAuditForeigned"))
        OR (rs_created_date >= (SELECT MAX(finished_at) FROM "DimAuditForeigned"));

EXCEPTION
	WHEN SQLSTATE '42703' THEN
		UPDATE "DimAuditForeigned" 
		SET 
			information = 'Something went wrong with selected columns. HINT: Check on "SELECT" or "INSERT" statement',
			status = 'ERROR',
            finished_at = NOW()
		WHERE start_at = (SELECT MAX(start_at) FROM "DimAuditForeigned");	
-- 		RAISE EXCEPTION  'when wrong with selected columns' USING HINT = 'Check on "SELECT" or "INSERT" statement';

END;
$$;
[2024-08-08T13:46:15.638+0000] {base.py:84} INFO - Using connection ID 'postgres_ldtbxh_stage' for task execution.
[2024-08-08T13:46:15.793+0000] {base.py:84} INFO - Using connection ID 'postgres_ldtbxh_stage' for task execution.
[2024-08-08T13:46:15.816+0000] {sql.py:470} INFO - Running statement: -- CREATE EXTENSION dblink;

/*** Load stage for dimensions ***/

DO
$$
BEGIN
    /***
        Load Source to stgDimFamily (Bronze)
    **/
    INSERT INTO "stgDimFamily"(family_id, family_code, family_type, years, 
                            province_code, province_name, district_code,
                            district_name, ward_code, ward_name, 
                            family_number, nation_in_place)
    SELECT 
        family_id, family_code, family_type, years
		province_code, province_name, district_code,
        district_name, ward_code, ward_name, 
        family_number, nation_in_place
    FROM dblink('host=host.docker.internal dbname=hongheovna password=*** user=postgres port=5434', 
                'select * from public.vw_stgdimfamily') 
    AS (
        family_id uuid,
        family_code VARCHAR(10),
        family_type VARCHAR(25),
        years SMALLINT,
        province_code CHAR(5),
        province_name VARCHAR(35),
        district_code CHAR(5),
        district_name VARCHAR(35),
        ward_code CHAR(5),
        ward_name VARCHAR(35),
        family_number VARCHAR(20),
        nation_in_place BOOL,
        created_date TIMESTAMP
    )
    WHERE created_date >= (SELECT MAX(finished_at) FROM "DimAuditForeigned");

    /***
        Load Source to stgDimFamilyMember (Bronze)
    ***/
    INSERT INTO "stgDimFamilyMember"(member_id, family_id, full_name, owner_relationship, 
                                    year_of_birth, month_of_birth, day_of_birth, 
                                    identity_card_number, nation, sex, height, weight,
                                    education_status, education_level, culture_level, training_level, has_medical_insurance,
                                    social_assistance, has_job, job_type, has_contract, has_pension)
    SELECT
        member_id, family_id, full_name, owner_relationship, 
        year_of_birth, month_of_birth, day_of_birth, 
        identity_card_number, nation, sex, height, weight,
        education_status, education_level, culture_level, training_level, has_medical_insurance,
        social_assistance, has_job, job_type, has_contract, has_pension
    FROM dblink('host=host.docker.internal dbname=hongheovna password=*** user=postgres port=5434',
                'select * from public.vw_stgdimfamilymember')
    AS (
        member_id uuid,
        family_id uuid,
        full_name VARCHAR(35),
        owner_relationship VARCHAR(15),
        year_of_birth SMALLINT,
        month_of_birth SMALLINT,
        day_of_birth SMALLINT,
        identity_card_number VARCHAR(12),
        nation VARCHAR(15),
        sex BOOL,
        height INT,
        weight INT,
        education_status BOOL,
        education_level public.EDU_LEVEL,
        culture_level public.CUL_LEVEL,
        training_level public.TRAIN_LEVEL,
        has_medical_insurance BOOL,
        social_assistance public.TCXH,
        has_job public.JOB_STATUS,
        job_type public.JOB_CATE,
        has_contract public.CONTRACT_TYPE,
        has_pension public.PENSION_TYPE,
        created_date TIMESTAMP
    )
    WHERE created_date >= (SELECT MAX(finished_at) FROM "DimAuditForeigned");


    /***
        Load Source to stgDimFamilyMember (Bronze)
    ***/
    INSERT INTO "stgDimSurvey"(family_id, year, month,
						   a_id, fast_classify_person,
						   condition_codes, condition_names, b1_id, is_aquaculture, 
						   electricity_source, water_source, reason_names, get_policy_names,
						   need_policy_names, a_grade, b1_grade, b2_grade,
						   final_result, classify_person)
    SELECT
        family_id, year, month,
        a_id, fast_classify_person,
        condition_codes, condition_names, b1_id, is_aquaculture, 
        electricity_source, water_source, reason_names, get_policy_names,
        need_policy_names, a_grade, b1_grade, b2_grade,
        final_result, classify_person
    FROM dblink('host=host.docker.internal dbname=hongheovna password=*** user=postgres port=5434', 
                'select * from public.vw_stgdimsurvey')
    AS (
        family_id uuid,
        a_id uuid,
        fast_classify_person VARCHAR(35),
        year INT,
        month INT,
        condition_codes CHAR(5)[],
        condition_names VARCHAR(255)[],
        b1_id uuid,
        is_aquaculture BOOL,
        electricity_source CHAR(5),
        water_source CHAR(5),
        reason_names VARCHAR(255)[],
        get_policy_names VARCHAR(255)[],
        need_policy_names VARCHAR(255)[],
        a_grade BOOL,
        b1_grade SMALLINT,
        b2_grade SMALLINT,
        final_result public.CLASSIFICATION,
        classify_person VARCHAR(35),
        a_created_date TIMESTAMP,
        b1_created_date TIMESTAMP,
        rs_created_date TIMESTAMP
    )
    WHERE (a_created_date >= (SELECT MAX(finished_at) FROM "DimAuditForeigned"))
        OR (b1_created_date >= (SELECT MAX(finished_at) FROM "DimAuditForeigned"))
        OR (rs_created_date >= (SELECT MAX(finished_at) FROM "DimAuditForeigned"));

EXCEPTION
	WHEN SQLSTATE '42703' THEN
		UPDATE "DimAuditForeigned" 
		SET 
			information = 'Something went wrong with selected columns. HINT: Check on "SELECT" or "INSERT" statement',
			status = 'ERROR',
            finished_at = NOW()
		WHERE start_at = (SELECT MAX(start_at) FROM "DimAuditForeigned");
    WHEN OTHERS THEN
        UPDATE "DimAuditForeigned" 
		SET 
			information = 'Something went wrong. HINT: Cannot identify the error and its solution',
			status = 'ERROR',
            finished_at = NOW()
		WHERE start_at = (SELECT MAX(start_at) FROM "DimAuditForeigned");
-- 		RAISE EXCEPTION  'Something went wrong' USING HINT = 'Cannot identify the error and its solution';

END;
$$;


/*** Load stage for facts ***/

DO
$$
BEGIN
    /***
        Load Source to stgPovertyStatusFact (Bronze)
    ***/
    INSERT INTO "stgPovertyStatusFact"(family_id, year, province_name, district_name,
                                    family_code, owner_name, hard_reasons, 
                                    get_policies, need_policies, 
                                    a_grade, b1_grade, b2_grade, final_result)
    SELECT
        family_id, year, province_name, district_name,
        family_code, owner_name, hard_reasons, 
        get_policies, need_policies, 
        a_grade, b1_grade, b2_grade, final_result
    FROM dblink('host=host.docker.internal dbname=hongheovna password=*** user=postgres port=5434', 
                'select * from public.vw_stgpovertystatusfact')
    AS (
        family_id uuid,
        year SMALLINT,
        province_name VARCHAR(35),
        district_name VARCHAR(35),
        family_code VARCHAR(10),
        owner_name VARCHAR(35),
        hard_reasons VARCHAR(255)[],
        get_policies VARCHAR(255)[],
        need_policies VARCHAR(255)[],
        a_grade BOOL,
        b1_grade SMALLINT,
        b2_grade SMALLINT,
        final_result public.CLASSIFICATION,
        a_created_date TIMESTAMP,
        b1_created_date TIMESTAMP,
        rs_created_date TIMESTAMP
    )
    WHERE (a_created_date >= (SELECT MAX(finished_at) FROM "DimAuditForeigned"))
        OR (b1_created_date >= (SELECT MAX(finished_at) FROM "DimAuditForeigned"))
        OR (rs_created_date >= (SELECT MAX(finished_at) FROM "DimAuditForeigned"));



    /***
        Load Source to stgMemberSurveyFact (Bronze)
    ***/
    INSERT INTO "stgMemberSurveyFact"(member_id, family_id, year, month,
                                    province_name, district_name,
                                    member_name, owner_relationship,
                                    year_of_birth, month_of_birth, day_of_birth,
                                    identity_card_number, nation, final_result)
    SELECT
        member_id, family_id, year, month,
        province_name, district_name,
        full_name, owner_relationship,
        year_of_birth, month_of_birth, day_of_birth,
        identity_card_number, nation, final_result
    FROM dblink('host=host.docker.internal dbname=hongheovna password=*** user=postgres port=5434', 
                'select * from public.vw_stgmembersurveyfact')
    AS (
        member_id uuid,
        family_id uuid,
        year INT,
        month INT,
        province_name VARCHAR(35),
        district_name VARCHAR(35),
        full_name VARCHAR(35),
        owner_relationship VARCHAR(15),
        year_of_birth SMALLINT,
        month_of_birth SMALLINT,
        day_of_birth SMALLINT,
        identity_card_number VARCHAR(12),
        nation VARCHAR(15),
        final_result public.CLASSIFICATION,
        member_created_date TIMESTAMP,
        rs_created_date TIMESTAMP
    )
    WHERE (member_created_date >= (SELECT MAX(finished_at) FROM "DimAuditForeigned"))
        OR (rs_created_date >= (SELECT MAX(finished_at) FROM "DimAuditForeigned"));

EXCEPTION
	WHEN SQLSTATE '42703' THEN
		UPDATE "DimAuditForeigned" 
		SET 
			information = 'Something went wrong with selected columns. HINT: Check on "SELECT" or "INSERT" statement',
			status = 'ERROR',
            finished_at = NOW()
		WHERE start_at = (SELECT MAX(start_at) FROM "DimAuditForeigned");	
-- 		RAISE EXCEPTION  'when wrong with selected columns' USING HINT = 'Check on "SELECT" or "INSERT" statement';

END;
$$;, parameters: None
[2024-08-08T13:46:16.178+0000] {taskinstance.py:441} INFO - ::group::Post task execution logs
[2024-08-08T13:46:16.194+0000] {taskinstance.py:1206} INFO - Marking task as SUCCESS. dag_id=Integrate_Data_Warehouse, task_id=bronze_hongheo, run_id=manual__2024-08-08T13:45:51.078125+00:00, execution_date=20240808T134551, start_date=20240808T134615, end_date=20240808T134616
[2024-08-08T13:46:16.268+0000] {local_task_job_runner.py:240} INFO - Task exited with return code 0
[2024-08-08T13:46:16.300+0000] {taskinstance.py:3498} INFO - 0 downstream tasks scheduled from follow-on schedule check
[2024-08-08T13:46:16.302+0000] {local_task_job_runner.py:222} INFO - ::endgroup::
